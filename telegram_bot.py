import logging
import asyncio
import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = "7338057696:AAGnNjK0nbCVQ9Va02aS5qFzZrHIOBmkNgU"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏
CATEGORY_NAMES = {
    'roboty-pylesosy': 'ü§ñ –†–æ–±–æ—Ç—ã-–ø—ã–ª–µ—Å–æ—Å—ã',
    'vertikalnye-pylesosy': 'üí® –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø—ã–ª–µ—Å–æ—Å—ã',
    'feny': 'üíá‚Äç‚ôÄÔ∏è –§–µ–Ω—ã'
}

# –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤ –∫–Ω–æ–ø–∫–µ –±—ã–ª–æ –≤–∏–¥–Ω–æ –º–æ–¥–µ–ª—å
PRODUCT_PREFIXES = {
    'roboty-pylesosy': [
        '–†–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å –¥–ª—è –º—ã—Ç—å—è –ø–æ–ª–æ–≤',
        '–†–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å'
    ],
    'vertikalnye-pylesosy': [
        '–ü—ã–ª–µ—Å–æ—Å —Ä—É—á–Ω–æ–π (handstick) –º–æ—é—â–∏–π',
        '–ü—ã–ª–µ—Å–æ—Å —Ä—É—á–Ω–æ–π (handstick)'
    ],
    'feny': ['–§–µ–Ω']
}


def get_categories():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    data_path = 'data'
    if not os.path.exists(data_path) or not os.path.isdir(data_path):
        return [], '–ü–∞–ø–∫–∞ `data` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä.'

    categories = []
    for folder_name in os.listdir(data_path):
        if os.path.isdir(os.path.join(data_path, folder_name)):
            result_file = os.path.join(data_path, folder_name, '4_category_result.json')
            if os.path.exists(result_file):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –¥–ª—è —Å–ª–æ–≤–∞—Ä—è –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                    category_key = folder_name.split('_')[0]
                    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
                    category_display_name = CATEGORY_NAMES.get(category_key, category_key.replace('-', ' ').capitalize())
                    categories.append({'name': category_display_name, 'id': folder_name})
                except IndexError:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º: {folder_name}")
                    continue

    if not categories:
        return [], '–í –ø–∞–ø–∫–µ `data` –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä.'

    return sorted(categories, key=lambda x: x['name']), None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    categories, error_message = get_categories()
    if error_message:
        await update.message.reply_text(error_message)
        return

    keyboard = [
        [InlineKeyboardButton(cat['name'], callback_data=f"cat:{cat['id']}")]
        for cat in categories
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)


async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()

    categories, error_message = get_categories()
    if error_message:
        await query.edit_message_text(error_message)
        return

    keyboard = [
        [InlineKeyboardButton(cat['name'], callback_data=f"cat:{cat['id']}")]
        for cat in categories
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)


async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()

    # callback_data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "cat:category_folder_name"
    _, category_folder_name = query.data.split(':', 1)

    try:
        category_key = category_folder_name.split('_')[0]
    except IndexError:
        # Fallback, –µ—Å–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        category_key = None

    result_file_path = os.path.join('data', category_folder_name, '4_category_result.json')

    try:
        with open(result_file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        products = data.get('products', [])

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π
        all_button = [InlineKeyboardButton("üì¶ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data=f"all:{category_folder_name}")]
        back_button = [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_main")]

        if not products:
            await query.edit_message_text(
                "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup([back_button])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_buttons = [all_button]
        for product in products:
            product_name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            product_id = product.get('productId')
            if product_id:
                # –£–º–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
                display_name = product_name
                if category_key:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –ø–æ –¥–ª–∏–Ω–µ, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ
                    prefixes_to_remove = sorted(PRODUCT_PREFIXES.get(category_key, []), key=len, reverse=True)
                    for prefix in prefixes_to_remove:
                        if display_name.lower().startswith(prefix.lower() + ' '):
                            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                            display_name = display_name[len(prefix):].lstrip()
                            break  # –ü—Ä–µ—Ñ–∏–∫—Å –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

                # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∫–Ω–æ–ø–∫—É
                # 64 –±–∞–π—Ç–∞ - –ª–∏–º–∏—Ç, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ ~2 –±–∞–π—Ç–∞ –Ω–∞ —Å–∏–º–≤–æ–ª. 30 * 2 = 60.
                display_name = (display_name[:30] + '‚Ä¶') if len(display_name) > 30 else display_name
                product_buttons.append([
                    InlineKeyboardButton(f"üõí {display_name}", callback_data=f"prod:{category_folder_name}:{product_id}")
                ])

        product_buttons.append(back_button)
        reply_markup = InlineKeyboardMarkup(product_buttons)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Å—Ä–∞–∑—É:", reply_markup=reply_markup)

    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_folder_name}: {e}")
        await query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_main")]])
        )


async def handle_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    # callback_data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "prod:category_folder_name:product_id"
    _, category_folder_name, product_id = query.data.split(':', 2)

    result_file_path = os.path.join('data', category_folder_name, '4_category_result.json')

    product_found = None
    try:
        with open(result_file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        for p in data.get('products', []):
            if p.get('productId') == product_id:
                product_found = p
                break
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –≤ {category_folder_name}: {e}")
        await context.bot.send_message(chat_id=query.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞.")
        return

    if product_found:
        name = product_found.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        base_price = product_found.get('item_basePrice', 'N/A')
        sale_price = product_found.get('item_salePrice', 'N/A')
        link = product_found.get('item_link', '#')

        message_text = (
            f"<b>{name}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞: {sale_price} ‚ÇΩ\n"
            f"<s>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {base_price} ‚ÇΩ</s>\n\n"
            f"<a href='{link}'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ,
        # —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message_text,
            parse_mode=constants.ParseMode.HTML,
            disable_web_page_preview=True
        )
    else:
        await context.bot.send_message(chat_id=query.message.chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É.")


async def handle_get_all_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    # callback_data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "all:category_folder_name"
    _, category_folder_name = query.data.split(':', 1)

    try:
        category_key = category_folder_name.split('_')[0]
        category_display_name = CATEGORY_NAMES.get(category_key, category_key.replace('-', ' ').capitalize())
    except IndexError:
        category_display_name = "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"–ù–∞—á–∏–Ω–∞—é –≤—ã–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_display_name}'. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
    )

    result_file_path = os.path.join('data', category_folder_name, '4_category_result.json')

    try:
        with open(result_file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        products = data.get('products', [])

        if not products:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_display_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤."
            )
            return

        for product in products:
            name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            base_price = product.get('item_basePrice', 'N/A')
            sale_price = product.get('item_salePrice', 'N/A')
            link = product.get('item_link', '#')

            message_text = (
                f"<b>{name}</b>\n\n"
                f"üí∞ –¶–µ–Ω–∞: {sale_price} ‚ÇΩ\n"
                f"<s>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {base_price} ‚ÇΩ</s>\n\n"
                f"<a href='{link}'>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>"
            )

            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=message_text,
                parse_mode=constants.ParseMode.HTML,
                disable_web_page_preview=True
            )
            await asyncio.sleep(0.2)

        await context.bot.send_message(chat_id=query.message.chat_id, text=f"üéâ –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_display_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_folder_name}: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_display_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(back_to_main_menu, pattern="^back_to_main$"))
    application.add_handler(CallbackQueryHandler(handle_category_selection, pattern="^cat:"))
    application.add_handler(CallbackQueryHandler(handle_product_selection, pattern="^prod:"))
    application.add_handler(CallbackQueryHandler(handle_get_all_products, pattern="^all:"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()
    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –≤ –ª–æ–≥, –∫–æ–≥–¥–∞ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    main()
